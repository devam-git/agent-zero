WEB_SEARCH_TEMPLATE =  {
    "display_name": "Web Search",
    "description": "Performs a basic DuckDuckGo search (HTML scraping). May be subject to rate limits.",
    "icon": "search",
    "base_classes": ["DataFrame"],
    "field_order": ["query", "timeout"],
    "outputs": [
        {
            "types": ["DataFrame"],
            "selected": "DataFrame", 
            "name": "results",
            "display_name": "Search Results",
            "method": "perform_search",
            "value": "__UNDEFINED__",
            "cache": True,
            "required_inputs": None,
            "allows_loop": False,
            "group_outputs": False,
            "options": None,
            "tool_mode": True
        },
        {
            "allows_loop": False,
            "cache": True,
            "display_name": "Toolset",
            "group_outputs": False,
            "hidden": None,
            "method": "to_toolkit",
            "name": "component_as_tool",
            "options": None,
            "required_inputs": None,
            "selected": "Tool",
            "tool_mode": True,
            "types": ["Tool"],
            "value": "__UNDEFINED__"
        }
    ],
    "template": {
        "_type": "Component",
        "query": {
            "_input_type": "MessageTextInput",
            "tool_mode": True,
            "trace_as_input": True,
            "trace_as_metadata": True,
            "load_from_db": False,
            "list": False,
            "list_add_label": "Add More",
            "required": False,
            "placeholder": "",
            "show": True,
            "name": "query",
            "value": "",
            "display_name": "Search Query",
            "advanced": False,
            "input_types": ["Message"],
            "dynamic": False,
            "info": "Keywords to search for.",
            "title_case": False,
            "type": "str"
        },
        "timeout": {
            "_input_type": "IntInput",
            "tool_mode": False,
            "trace_as_metadata": True,
            "list": False,
            "list_add_label": "Add More",
            "required": False,
            "placeholder": "",
            "show": True,
            "name": "timeout",
            "value": 5,
            "display_name": "Timeout",
            "advanced": True,
            "dynamic": False,
            "info": "Timeout for the web search request.",
            "title_case": False,
            "type": "int"
        },
        "code": {
            "advanced": True,
            "dynamic": True,
            "fileTypes": [],
            "file_path": "",
            "info": "",
            "list": False,
            "load_from_db": False,
            "multiline": True,
            "name": "code",
            "password": False,
            "placeholder": "",
            "required": True,
            "show": True,
            "title_case": False,
            "type": "code",
            "value": "import re\nfrom urllib.parse import parse_qs, unquote, urlparse\n\nimport pandas as pd\nimport requests\nfrom bs4 import BeautifulSoup\n\nfrom langflow.custom import Component\nfrom langflow.io import IntInput, MessageTextInput, Output\nfrom langflow.schema import DataFrame\nfrom langflow.services.deps import get_settings_service\n\n\nclass WebSearchComponent(Component):\n    display_name = \"Web Search\"\n    description = \"Performs a basic DuckDuckGo search (HTML scraping). May be subject to rate limits.\"\n    icon = \"search\"\n    name = \"WebSearchNoAPI\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"query\",\n            display_name=\"Search Query\",\n            info=\"Keywords to search for.\",\n            tool_mode=True,\n            required=False,\n        ),\n        IntInput(\n            name=\"timeout\",\n            display_name=\"Timeout\",\n            info=\"Timeout for the web search request.\",\n            value=5,\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(name=\"results\", display_name=\"Search Results\", method=\"perform_search\"),\n    ]\n\n    def validate_url(self, string: str) -> bool:\n        url_regex = re.compile(\n            r\"^(https?:\\/\\/)?\" r\"(www\\.)?\" r\"([a-zA-Z0-9.-]+)\" r\"(\\.[a-zA-Z]{2,})?\" r\"(:\\d+)?\" r\"(\\/[^\\s]*)?$\",\n            re.IGNORECASE,\n        )\n        return bool(url_regex.match(string))\n\n    def ensure_url(self, url: str) -> str:\n        if not url.startswith((\"http://\", \"https://\")):\n            url = \"https://\" + url\n        if not self.validate_url(url):\n            msg = f\"Invalid URL: {url}\"\n            raise ValueError(msg)\n        return url\n\n    def _sanitize_query(self, query: str) -> str:\n        \"\"\"Sanitize search query.\"\"\"\n        # Remove potentially dangerous characters\n        return re.sub(r'[<>\"\\']', \"\", query.strip())\n\n    def perform_search(self) -> DataFrame:\n        query = self._sanitize_query(self.query)\n        if not query:\n            msg = \"Empty search query\"\n            raise ValueError(msg)\n        headers = {\"User-Agent\": get_settings_service().settings.user_agent}\n        params = {\"q\": query, \"kl\": \"us-en\"}\n        url = \"https://html.duckduckgo.com/html/\"\n\n        try:\n            response = requests.get(url, params=params, headers=headers, timeout=self.timeout)\n            response.raise_for_status()\n        except requests.RequestException as e:\n            self.status = f\"Failed request: {e!s}\"\n            return DataFrame(pd.DataFrame([{\"title\": \"Error\", \"link\": \"\", \"snippet\": str(e), \"content\": \"\"}]))\n\n        if not response.text or \"text/html\" not in response.headers.get(\"content-type\", \"\").lower():\n            self.status = \"No results found\"\n            return DataFrame(\n                pd.DataFrame([{\"title\": \"Error\", \"link\": \"\", \"snippet\": \"No results found\", \"content\": \"\"}])\n            )\n        soup = BeautifulSoup(response.text, \"html.parser\")\n        results = []\n\n        for result in soup.select(\"div.result\"):\n            title_tag = result.select_one(\"a.result__a\")\n            snippet_tag = result.select_one(\"a.result__snippet\")\n            if title_tag:\n                raw_link = title_tag.get(\"href\", \"\")\n                parsed = urlparse(raw_link)\n                uddg = parse_qs(parsed.query).get(\"uddg\", [\"\"])[0]\n                decoded_link = unquote(uddg) if uddg else raw_link\n\n                try:\n                    final_url = self.ensure_url(decoded_link)\n                    page = requests.get(final_url, headers=headers, timeout=self.timeout)\n                    page.raise_for_status()\n                    content = BeautifulSoup(page.text, \"lxml\").get_text(separator=\" \", strip=True)\n                except requests.RequestException as e:\n                    final_url = decoded_link\n                    content = f\"(Failed to fetch: {e!s}\"\n\n                results.append(\n                    {\n                        \"title\": title_tag.get_text(strip=True),\n                        \"link\": final_url,\n                        \"snippet\": snippet_tag.get_text(strip=True) if snippet_tag else \"\",\n                        \"content\": content,\n                    }\n                )\n\n        df_results = pd.DataFrame(results)\n        return DataFrame(df_results)\n"
        }
    }
}