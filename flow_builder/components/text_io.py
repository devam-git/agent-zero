# component_templates.py - Complete file with TextInput and TextOutput templates

TEXT_INPUT_TEMPLATE = {
        "description": "Simple text string input for backend processing workflows.",
        "display_name": "Text Input",
        "base_classes": ["Message"],
        "icon": "Type",
        "field_order": ["input_text", "metadata"],
        "outputs": [{
            "allows_loop": False,
            "cache": True,
            "display_name": "Text Message",
            "group_outputs": False,
            "method": "build_message",
            "name": "text",
            "selected": "Message",
            "tool_mode": True,
            "types": ["Message"],
            "value": "__UNDEFINED__"
        }],
        "template": {
            "_type": "Component",
            "input_text": {
                "_input_type": "MultilineInput",
                "advanced": False,
                "display_name": "Input Text",
                "dynamic": False,
                "info": "Plain text input for processing (does not appear in Playground interface)",
                "input_types": [],
                "list": False,
                "load_from_db": False,
                "multiline": True,
                "name": "input_text",
                "placeholder": "Enter your text content here...",
                "required": True,
                "show": True,
                "title_case": False,
                "tool_mode": False,
                "trace_as_input": True,
                "trace_as_metadata": True,
                "type": "str",
                "value": ""
            },
            "metadata": {
                "_input_type": "MessageTextInput",
                "advanced": True,
                "display_name": "Metadata",
                "dynamic": False,
                "info": "Optional metadata to include with the text message",
                "input_types": ["Message"],
                "list": False,
                "load_from_db": False,
                "name": "metadata",
                "placeholder": "Optional metadata...",
                "required": False,
                "show": True,
                "title_case": False,
                "tool_mode": False,
                "trace_as_input": True,
                "trace_as_metadata": True,
                "type": "str",
                "value": ""
            },
            "code": {
                "advanced": True,
                "dynamic": True,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": False,
                "load_from_db": False,
                "multiline": True,
                "name": "code",
                "password": False,
                "placeholder": "",
                "required": True,
                "show": True,
                "title_case": False,
                "type": "code",
                "value": "from langflow.custom.custom_component.component import Component\nfrom langflow.io import MultilineInput, MessageTextInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextInputComponent(Component):\n    display_name: str = \"Text Input\"\n    description: str = \"Simple text string input for backend processing workflows.\"\n    icon = \"Type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_text\",\n            display_name=\"Input Text\",\n            info=\"Plain text input for processing (does not appear in Playground interface)\",\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"metadata\",\n            display_name=\"Metadata\",\n            info=\"Optional metadata to include with the text message\",\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text Message\", name=\"text\", method=\"build_message\"),\n    ]\n\n    async def build_message(self) -> Message:\n        message = Message(\n            text=self.input_text,\n            sender=\"TextInput\",\n            sender_name=\"Text Input Component\"\n        )\n        \n        # Add metadata if provided\n        if self.metadata:\n            message.properties.metadata = self.metadata\n        \n        self.status = f\"Processed text: {len(self.input_text)} characters\"\n        return message\n"
            }
        },
        "tool_mode": False,
        "showNode": True,
        "priority": 0,
        "group_outputs": False
    }

TEXT_OUTPUT_TEMPLATE = {
        "description": "Simple text display for backend processing workflows.",
        "display_name": "Text Output", 
        "base_classes": ["Message"],
        "icon": "FileText",
        "field_order": ["input_value", "format_output", "include_metadata"],
        "outputs": [{
            "allows_loop": False,
            "cache": True,
            "display_name": "Formatted Text",
            "group_outputs": False,
            "method": "format_text",
            "name": "formatted_text",
            "selected": "Message",
            "tool_mode": True,
            "types": ["Message"],
            "value": "__UNDEFINED__"
        }],
        "template": {
            "_type": "Component",
            "input_value": {
                "_input_type": "HandleInput",
                "advanced": False,
                "display_name": "Input",
                "dynamic": False,
                "info": "Text or Message input to be displayed (does not appear in Playground interface)",
                "input_types": ["Message", "Data", "str"],
                "list": False,
                "load_from_db": False,
                "name": "input_value",
                "placeholder": "",
                "required": True,
                "show": True,
                "title_case": False,
                "trace_as_input": True,
                "trace_as_metadata": True,
                "type": "other",
                "value": ""
            },
            "format_output": {
                "_input_type": "BoolInput",
                "advanced": False,
                "display_name": "Format Output",
                "dynamic": False,
                "info": "Whether to apply formatting to the output text",
                "list": False,
                "name": "format_output",
                "placeholder": "",
                "required": False,
                "show": True,
                "title_case": False,
                "tool_mode": False,
                "trace_as_metadata": True,
                "type": "bool",
                "value": True
            },
            "include_metadata": {
                "_input_type": "BoolInput",
                "advanced": True,
                "display_name": "Include Metadata",
                "dynamic": False,
                "info": "Whether to include metadata information in the output",
                "list": False,
                "name": "include_metadata",
                "placeholder": "",
                "required": False,
                "show": True,
                "title_case": False,
                "tool_mode": False,
                "trace_as_metadata": True,
                "type": "bool",
                "value": False
            },
            "code": {
                "advanced": True,
                "dynamic": True,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": False,
                "load_from_db": False,
                "multiline": True,
                "name": "code",
                "password": False,
                "placeholder": "",
                "required": True,
                "show": True,
                "title_case": False,
                "type": "code",
                "value": "from typing import Any\nfrom langflow.custom.custom_component.component import Component\nfrom langflow.io import HandleInput, BoolInput, Output\nfrom langflow.schema.message import Message\nfrom langflow.schema.data import Data\n\n\nclass TextOutputComponent(Component):\n    display_name: str = \"Text Output\"\n    description: str = \"Simple text display for backend processing workflows.\"\n    icon = \"FileText\"\n    name = \"TextOutput\"\n\n    inputs = [\n        HandleInput(\n            name=\"input_value\",\n            display_name=\"Input\",\n            info=\"Text or Message input to be displayed (does not appear in Playground interface)\",\n            input_types=[\"Message\", \"Data\", \"str\"],\n            required=True,\n        ),\n        BoolInput(\n            name=\"format_output\",\n            display_name=\"Format Output\",\n            info=\"Whether to apply formatting to the output text\",\n            value=True,\n        ),\n        BoolInput(\n            name=\"include_metadata\",\n            display_name=\"Include Metadata\",\n            info=\"Whether to include metadata information in the output\",\n            value=False,\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Formatted Text\", name=\"formatted_text\", method=\"format_text\"),\n    ]\n\n    def _extract_text(self, input_value: Any) -> str:\n        \"\"\"Extract text content from various input types.\"\"\"\n        if isinstance(input_value, Message):\n            return input_value.text\n        elif isinstance(input_value, Data):\n            return str(input_value.data)\n        elif isinstance(input_value, str):\n            return input_value\n        else:\n            return str(input_value)\n\n    def _format_text_content(self, text: str) -> str:\n        \"\"\"Apply basic formatting to text content.\"\"\"\n        if not self.format_output:\n            return text\n        \n        # Basic formatting: clean whitespace, ensure proper line endings\n        formatted = text.strip()\n        # Replace multiple spaces with single space\n        formatted = ' '.join(formatted.split())\n        # Ensure sentences end with proper punctuation spacing\n        formatted = formatted.replace('. ', '.\\n').replace('! ', '!\\n').replace('? ', '?\\n')\n        \n        return formatted\n\n    async def format_text(self) -> Message:\n        # Extract text from input\n        text_content = self._extract_text(self.input_value)\n        \n        # Apply formatting if requested\n        formatted_text = self._format_text_content(text_content)\n        \n        # Create output message\n        output_message = Message(\n            text=formatted_text,\n            sender=\"TextOutput\",\n            sender_name=\"Text Output Component\"\n        )\n        \n        # Include metadata if requested and available\n        if self.include_metadata and isinstance(self.input_value, Message):\n            if hasattr(self.input_value, 'properties') and self.input_value.properties:\n                output_message.properties.source_metadata = str(self.input_value.properties)\n        \n        self.status = f\"Formatted text output: {len(formatted_text)} characters\"\n        return output_message\n"
            }
        },
        "tool_mode": False,
        "showNode": True,
        "priority": 0,
        "group_outputs": False
    }
