PROMPT_TEMPLATE = {
    "description": "Create a prompt template with dynamic variables.",
    "display_name": "Prompt",
    "icon": "braces",
    "base_classes": ["Message"],
    "beta": False,
    "conditional_paths": [],
    "custom_fields": {"template": []},  # Will be populated with dynamic field names
    "documentation": "",
    "edited": False,
    "frozen": False,
    "legacy": False,
    "lf_version": "1.4.3",
    "metadata": {},
    "output_types": [],
    "pinned": False,
    "outputs": [{
        "allows_loop": False,
        "cache": True,
        "display_name": "Prompt",
        "group_outputs": False,
        "method": "build_prompt",
        "name": "prompt",
        "selected": "Message",
        "tool_mode": True,
        "types": ["Message"],
        "value": "__UNDEFINED__"
    }],
    "field_order": [
        "template"
    ],
    "template": {
        "_type": "Component",
        "template": {
            "_input_type": "PromptInput",
            "advanced": False,
            "display_name": "Template",
            "dynamic": False,
            "info": "Enter your prompt template with {variable} placeholders",
            "list": False,
            "list_add_label": "Add More",
            "load_from_db": False,
            "name": "template",
            "placeholder": "Enter your prompt template here...\n\nUse {variable_name} for dynamic inputs.",
            "required": False,
            "show": True,
            "title_case": False,
            "tool_mode": False,
            "trace_as_input": True,
            "type": "prompt",
            "value": ""
        },
        "tool_placeholder": {
            "_input_type": "MessageTextInput",
            "advanced": True,
            "display_name": "Tool Placeholder",
            "dynamic": False,
            "info": "A placeholder input for tool mode.",
            "input_types": ["Message"],
            "list": False,
            "list_add_label": "Add More",
            "load_from_db": False,
            "name": "tool_placeholder",
            "placeholder": "",
            "required": False,
            "show": True,
            "title_case": False,
            "tool_mode": True,
            "trace_as_input": True,
            "trace_as_metadata": True,
            "type": "str",
            "value": ""
        },
        "code": {
            "advanced": True,
            "dynamic": True,
            "fileTypes": [],
            "file_path": "",
            "info": "",
            "list": False,
            "load_from_db": False,
            "multiline": True,
            "name": "code",
            "password": False,
            "placeholder": "",
            "required": True,
            "show": True,
            "title_case": False,
            "type": "code",
            "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom.custom_component.component import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import MessageTextInput, Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"braces\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            tool_mode=True,\n            advanced=True,\n            info=\"A placeholder input for tool mode.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    async def update_frontend_node(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = await super().update_frontend_node(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n"
        }
    },
    "tool_mode": False,
    "showNode": True,
    "priority": 0,
    "group_outputs": False
}