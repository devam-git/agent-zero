CHAT_OUTPUT_TEMPLATE = {
    "description": "Display a chat message in the Playground.",
    "display_name": "Chat Output",
    "icon": "MessagesSquare",
    "base_classes": ["Message"],
    "beta": False,
    "conditional_paths": [],
    "custom_fields": {},
    "documentation": "",
    "edited": False,
    "frozen": False,
    "legacy": False,
    "lf_version": "1.4.3",
    "metadata": {},
    "output_types": [],
    "pinned": False,
    "outputs": [{
        "allows_loop": False,
        "cache": True,
        "display_name": "Output Message",
        "group_outputs": False,
        "method": "message_response",
        "name": "message",
        "selected": "Message",
        "tool_mode": True,
        "types": ["Message"],
        "value": "__UNDEFINED__"
    }],
    "field_order": [
        "input_value",
        "should_store_message",
        "sender",
        "sender_name",
        "session_id",
        "data_template",
        "background_color",
        "chat_icon",
        "text_color",
        "clean_data"
    ],
    "template": {
        "_type": "Component",
        "input_value": {
            "_input_type": "HandleInput",
            "advanced": False,
            "display_name": "Inputs",
            "dynamic": False,
            "info": "Message to be passed as output.",
            "input_types": ["Data", "DataFrame", "Message"],
            "list": False,
            "list_add_label": "Add More",
            "load_from_db": False,
            "name": "input_value",
            "placeholder": "",
            "required": True,
            "show": True,
            "title_case": False,
            "trace_as_input": True,
            "trace_as_metadata": True,
            "type": "other",
            "value": ""
        },
        "should_store_message": {
            "_input_type": "BoolInput",
            "advanced": True,
            "display_name": "Store Messages",
            "dynamic": False,
            "info": "Store the message in the history.",
            "list": False,
            "list_add_label": "Add More",
            "name": "should_store_message",
            "placeholder": "",
            "required": False,
            "show": True,
            "title_case": False,
            "tool_mode": False,
            "trace_as_metadata": True,
            "type": "bool",
            "value": True
        },
        "sender": {
            "_input_type": "DropdownInput",
            "advanced": True,
            "combobox": False,
            "dialog_inputs": {},
            "display_name": "Sender Type",
            "dynamic": False,
            "info": "Type of sender.",
            "name": "sender",
            "options": ["Machine", "User"],
            "options_metadata": [],
            "placeholder": "",
            "required": False,
            "show": True,
            "title_case": False,
            "toggle": False,
            "tool_mode": False,
            "trace_as_metadata": True,
            "type": "str",
            "value": "Machine"
        },
        "sender_name": {
            "_input_type": "MessageTextInput",
            "advanced": True,
            "display_name": "Sender Name",
            "dynamic": False,
            "info": "Name of the sender.",
            "input_types": ["Message"],
            "list": False,
            "list_add_label": "Add More",
            "load_from_db": False,
            "name": "sender_name",
            "placeholder": "",
            "required": False,
            "show": True,
            "title_case": False,
            "tool_mode": False,
            "trace_as_input": True,
            "trace_as_metadata": True,
            "type": "str",
            "value": "AI"
        },
        "session_id": {
            "_input_type": "MessageTextInput",
            "advanced": True,
            "display_name": "Session ID",
            "dynamic": False,
            "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
            "input_types": ["Message"],
            "list": False,
            "list_add_label": "Add More",
            "load_from_db": False,
            "name": "session_id",
            "placeholder": "",
            "required": False,
            "show": True,
            "title_case": False,
            "tool_mode": False,
            "trace_as_input": True,
            "trace_as_metadata": True,
            "type": "str",
            "value": ""
        },
        "data_template": {
            "_input_type": "MessageTextInput",
            "advanced": True,
            "display_name": "Data Template",
            "dynamic": False,
            "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
            "input_types": ["Message"],
            "list": False,
            "list_add_label": "Add More",
            "load_from_db": False,
            "name": "data_template",
            "placeholder": "",
            "required": False,
            "show": True,
            "title_case": False,
            "tool_mode": False,
            "trace_as_input": True,
            "trace_as_metadata": True,
            "type": "str",
            "value": "{text}"
        },
        "background_color": {
            "_input_type": "MessageTextInput",
            "advanced": True,
            "display_name": "Background Color",
            "dynamic": False,
            "info": "The background color of the icon.",
            "input_types": ["Message"],
            "list": False,
            "list_add_label": "Add More",
            "load_from_db": False,
            "name": "background_color",
            "placeholder": "",
            "required": False,
            "show": True,
            "title_case": False,
            "tool_mode": False,
            "trace_as_input": True,
            "trace_as_metadata": True,
            "type": "str",
            "value": ""
        },
        "chat_icon": {
            "_input_type": "MessageTextInput",
            "advanced": True,
            "display_name": "Icon",
            "dynamic": False,
            "info": "The icon of the message.",
            "input_types": ["Message"],
            "list": False,
            "list_add_label": "Add More",
            "load_from_db": False,
            "name": "chat_icon",
            "placeholder": "",
            "required": False,
            "show": True,
            "title_case": False,
            "tool_mode": False,
            "trace_as_input": True,
            "trace_as_metadata": True,
            "type": "str",
            "value": ""
        },
        "text_color": {
            "_input_type": "MessageTextInput",
            "advanced": True,
            "display_name": "Text Color",
            "dynamic": False,
            "info": "The text color of the name",
            "input_types": ["Message"],
            "list": False,
            "list_add_label": "Add More",
            "load_from_db": False,
            "name": "text_color",
            "placeholder": "",
            "required": False,
            "show": True,
            "title_case": False,
            "tool_mode": False,
            "trace_as_input": True,
            "trace_as_metadata": True,
            "type": "str",
            "value": ""
        },
        "clean_data": {
            "_input_type": "BoolInput",
            "advanced": True,
            "display_name": "Basic Clean Data",
            "dynamic": False,
            "info": "Whether to clean the data",
            "list": False,
            "list_add_label": "Add More",
            "name": "clean_data",
            "placeholder": "",
            "required": False,
            "show": True,
            "title_case": False,
            "tool_mode": False,
            "trace_as_metadata": True,
            "type": "bool",
            "value": True
        },
        "code": {
            "advanced": True,
            "dynamic": True,
            "fileTypes": [],
            "file_path": "",
            "info": "",
            "list": False,
            "load_from_db": False,
            "multiline": True,
            "name": "code",
            "password": False,
            "placeholder": "",
            "required": True,
            "show": True,
            "title_case": False,
            "type": "code",
            "value": "from collections.abc import Generator\nfrom typing import Any\n\nimport orjson\nfrom fastapi.encoders import jsonable_encoder\n\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.helpers.data import safe_convert\nfrom langflow.inputs.inputs import BoolInput, DropdownInput, HandleInput, MessageTextInput\nfrom langflow.schema.data import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.template.field.base import Output\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        HandleInput(\n            name=\"input_value\",\n            display_name=\"Inputs\",\n            info=\"Message to be passed as output.\",\n            input_types=[\"Data\", \"DataFrame\", \"Message\"],\n            required=True,\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"clean_data\",\n            display_name=\"Basic Clean Data\",\n            value=True,\n            info=\"Whether to clean the data\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Output Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            # Handle case where source is a ChatOpenAI object\n            if hasattr(source, \"model_name\"):\n                source_dict[\"source\"] = source.model_name\n            elif hasattr(source, \"model\"):\n                source_dict[\"source\"] = str(source.model)\n            else:\n                source_dict[\"source\"] = str(source)\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        # First convert the input to string if needed\n        text = self.convert_to_string()\n\n        # Get source properties\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n        background_color = self.background_color\n        text_color = self.text_color\n        if self.chat_icon:\n            icon = self.chat_icon\n\n        # Create or use existing Message object\n        if isinstance(self.input_value, Message):\n            message = self.input_value\n            # Update message properties\n            message.text = text\n        else:\n            message = Message(text=text)\n\n        # Set message properties\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n        message.properties.icon = icon\n        message.properties.background_color = background_color\n        message.properties.text_color = text_color\n\n        # Store message if needed\n        if self.session_id and self.should_store_message:\n            stored_message = await self.send_message(message)\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n\n    def _serialize_data(self, data: Data) -> str:\n        \"\"\"Serialize Data object to JSON string.\"\"\"\n        # Convert data.data to JSON-serializable format\n        serializable_data = jsonable_encoder(data.data)\n        # Serialize with orjson, enabling pretty printing with indentation\n        json_bytes = orjson.dumps(serializable_data, option=orjson.OPT_INDENT_2)\n        # Convert bytes to string and wrap in Markdown code blocks\n        return \"```json\\n\" + json_bytes.decode(\"utf-8\") + \"\\n```\"\n\n    def _validate_input(self) -> None:\n        \"\"\"Validate the input data and raise ValueError if invalid.\"\"\"\n        if self.input_value is None:\n            msg = \"Input data cannot be None\"\n            raise ValueError(msg)\n        if isinstance(self.input_value, list) and not all(\n            isinstance(item, Message | Data | DataFrame | str) for item in self.input_value\n        ):\n            invalid_types = [\n                type(item).__name__\n                for item in self.input_value\n                if not isinstance(item, Message | Data | DataFrame | str)\n            ]\n            msg = f\"Expected Data or DataFrame or Message or str, got {invalid_types}\"\n            raise TypeError(msg)\n        if not isinstance(\n            self.input_value,\n            Message | Data | DataFrame | str | list | Generator | type(None),\n        ):\n            type_name = type(self.input_value).__name__\n            msg = f\"Expected Data or DataFrame or Message or str, Generator or None, got {type_name}\"\n            raise TypeError(msg)\n\n    def convert_to_string(self) -> str | Generator[Any, None, None]:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        self._validate_input()\n        if isinstance(self.input_value, list):\n            return \"\\n\".join([safe_convert(item, clean_data=self.clean_data) for item in self.input_value])\n        if isinstance(self.input_value, Generator):\n            return self.input_value\n        return safe_convert(self.input_value)\n"
        }
    },
    "tool_mode": False
}